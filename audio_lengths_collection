### BE CAREFUL! The following script is not a universal solution.
### info from: http://stackoverflow.com/questions/7833807/get-wav-file-length-or-duration

# Used to walk through the directory in order to collect list of audio files by in-built methods.
import os
# Used to open audiofiles and measuring its length.
import wave
import contextlib


# Two backslashes for Windows systems. For Unix-based and Mac OS minor alternations may be required.
# os.scandir scans directory for al entries, only files are added to a resulted list then.
def listing_files(audio_directory):
    files_list = []
    for item in os.scandir(audio_directory):
        if item.is_file():
            files_list.append(item.name)
    return tuple(files_list)


# The duration of an audiofile is equal to the number of frames divided by the framerate (frames per second).
def measuring_audio_length(filename):
    path_to_wav = audio_directory + '\\' + filename
    with contextlib.closing(wave.open(path_to_wav, 'r')) as f:
        frames = f.getnframes()
        rate = f.getframerate()
        duration = frames / float(rate)
    return filename, duration


# Making a csv-table with semicolon (;) as a separator: understandable by Notepad++, Excel, Open/LibreOffice, etc.
# str() function for one_pair[1] variable is obligatory because the presumed data type for this variable is float,
# so one have to convert it to the string type at first in order to write down in the file eventually.
def making_table(list_of_lengths):
    final_table = ''
    for one_pair in list_of_lengths:
        final_table += one_pair[0] + ';' + str(one_pair[1]) + '\n'
    file_table = open('audio_lengths.csv', 'w', encoding='utf-8')
    file_table.write(final_table)
    file_table.close()


# Human-readable instructions are placed at the beginning of the script just in case.
print("Please, create a folder named audio in the same folder with this script.")
print("Put all the files for analysis in the created folder.")
print("If you are ready, press any key to continue.")
print("Otherwise do the things listed above and then run this script again.")
input()

# As we very often use this path in the script, it is useful to have it as a global variable.
audio_directory = os.getcwd() + '\\audio'

# Making a tuple that consists of all the .wav-files to measure.
audios_tuple = listing_files(audio_directory)

# Making a special list for all pairs of filename and the file duration.
all_list = []
for one_file in audios_tuple:
    all_list.append(measuring_audio_length(one_file))

# Writing down the results in the csv-table.
making_table(all_list)
